#
# Python Program to assign Ranks and community to each Node.
#
# @author : Akhil Simha Neela (neela@uni-bremen.de)
# @date   : 06-Mar-2023



import numpy as np
import pandas as pd

# Declaring Top Nodes as List
community_val = [122, 129, 148, 221, 206, 281, 362, 421, 461, 468]
try:
    df = pd.read_csv("output_rc.csv") # Reading the file generated by MobilityCheckModel

except FileNotFoundError:
    print("Error: File 'output_mm.csv' not found.")

df = df.fillna(0)  # By default, fill any NaN as 0
sample = df.values[:, 1:-1]  # Delete the first column and last two column

unique_interactions = np.where(sample > 0, 1, 0)
total_interaction = np.sum(unique_interactions, axis=0)

#To find 10 top community nodes
dataframe1 = pd.DataFrame(total_interaction.T, columns=['total_interaction'], dtype="Int64")
top_community = dataframe1.nlargest(60, 'total_interaction')
top_community = list((top_community.index + 1))
community_val = top_community

array = []  # Dummy Array
for i in community_val:  # i is assigned the values of Top Nodes
    array.append(sample[i-1, :])  # Appending value to dummy matrix from the top node.
    # Ex: Capturing how many times each nodethe   is interacting with the top nodes.
values = np.stack(array, axis=0)  # Stacking the dummy array : Number of Rows = 10 (Top Nodes)

comm = np.argmax(values, axis=0)  # Captures the index of the highest value in column the array of 10 x 535
comm_values = np.amax(values, axis=0)  # Captures the value of how many times the node interacted with top node
comm = list(map(lambda x: community_val[x], comm))  # From the captured index value we assign the community name.
for i in community_val:
    comm[i-1] = i

comm_with_num = np.stack((comm, comm_values, total_interaction), axis=0)  # Community with Number of interactions is
# stacked for each node.

# Converting into data frame while transposing
dataframe = pd.DataFrame(comm_with_num.T, columns=['Community', 'num_interaction', 'total_interaction'], dtype="Int64")
dataframe.sort_values(by=['Community', 'num_interaction'], inplace=True)  # First it is sorted by community and then
# followed by number of interactions
# Ranking in data frames for assigning local rank in that particular community
dataframe['local_rank'] = dataframe.groupby('Community')['num_interaction'].rank('first', ascending=True).astype(int)
dataframe['global_rank'] = dataframe['total_interaction'].rank(method='first', ascending=False).astype(int)

dataframe = dataframe.sort_index(ascending=True)  # Sorting the dataframe with respect to node numbers

# build own address from nodeID (in the form of a MAC address)
ownAddress = []
index = df.index
for nodeID in index:
    digit1 = int((nodeID - (nodeID % 10000)) / 10000)
    digit2 = int(((nodeID - (digit1 * 10000)) - ((nodeID - (digit1 * 10000)) % 1000)) / 1000)
    digit3 = int(
        ((nodeID - (digit1 * 10000) - (digit2 * 1000)) - ((nodeID - (digit1 * 10000) - (digit2 * 1000)) % 100)) / 100)
    digit4 = int(((nodeID - (digit1 * 10000) - (digit2 * 1000) - (digit3 * 100)) - (
            (nodeID - (digit1 * 10000) - (digit2 * 1000) - (digit3 * 100)) % 10)) / 10)
    digit5 = int(nodeID - (digit1 * 10000) - (digit2 * 1000) - (digit3 * 100) - (digit4 * 10))
    ownAddress.append(
        "02:0" + str(digit1) + ":0" + str(digit2) + ":0" + str(digit3) + ":0" + str(digit4) + ":0" + str(digit5))

dataframe['MAC_address'] = ownAddress

dataframe = dataframe[["Community", "global_rank", "local_rank", "MAC_address"]]
dataframe.to_csv('output_py.csv', index=True, header=True)  # Storing the result to CSV File
print('Success')
